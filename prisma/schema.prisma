// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

enum Role {
  USER
  ADMIN
}

model User {
  id          String                 @id @default(uuid())
  name        String
  phoneNumber String                 @unique
  email       String?                @unique
  password    String
  companyName String?
  logo        String?
  timezone    String                 @default("UTC")
  role        Role                   @default(USER)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relations
  contacts               Contact[]
  aiMessages             AiMessage[]
  investmentCalculations InvestmentCalculation[]
}

model Contact {
  id            String                 @id @default(uuid())
  name          String
  phoneNumber   String
  email         String?
  address       String?
  tags          String[]
  notes         String?
  status        String      // "lead", "client", "former_client"
  pipelineStage String?
  createdBy     String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  // Relations
  user                   User                     @relation(fields: [createdBy], references: [id])
  aiMessages             AiMessage[]
  investmentCalculations InvestmentCalculation[]
}

model CalendarEvent {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  eventType   String    // "meeting", "other"
  relatedId   String?   // ID of related entity
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AiMessage {
  id          String    @id @default(uuid())
  message     String
  senderType  String    // "AI" or "USER"
  userId      String    // The user interacting or receiving the message
  contactId   String?   // Link to the relevant contact
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  contact     Contact?  @relation(fields: [contactId], references: [id])
}

model InvestmentCalculation {
  id                    String    @id @default(uuid())
  propertyType          String    // e.g., "Single Family Residence"
  marketArea            String    // e.g., "Indianapolis, IN"
  investmentAmount      Float     // e.g., 100000
  holdPeriod            Int       // in years, e.g., 5
  annualReturnRate      Float     // e.g., 10.0 (percentage)
  propertyManagementFee Float     // e.g., 8.0 (percentage)
  vacancyRate           Float     // e.g., 5.0 (percentage)
  monthlyCashFlow       Float     // e.g., 725
  annualCashFlow        Float     // e.g., 8700
  totalReturn           Float     // e.g., 43500
  roi                   Float     // e.g., 43.5 (percentage)
  notes                 String?
  contactId             String    // Link to the relevant contact
  createdBy             String    // User who created this calculation
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  contact               Contact   @relation(fields: [contactId], references: [id])
  user                  User      @relation(fields: [createdBy], references: [id])
}
